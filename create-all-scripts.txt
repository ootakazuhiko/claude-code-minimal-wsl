# Create-AllScripts.ps1 - すべてのスクリプトファイルを自動生成
# このスクリプトをプロジェクトルートで実行してください

param(
    [string]$ProjectRoot = (Get-Location).Path
)

Write-Host "Minimal Claude Workspaces - Script File Generator" -ForegroundColor Cyan
Write-Host "================================================" -ForegroundColor Cyan
Write-Host ""

# ディレクトリ構造の作成
Write-Host "Creating directory structure..." -ForegroundColor Green
$directories = @(
    "scripts\powershell",
    "scripts\bash",
    "docs",
    "examples\sample-projects",
    "tools",
    ".github\workflows"
)

foreach ($dir in $directories) {
    $fullPath = Join-Path $ProjectRoot $dir
    if (-not (Test-Path $fullPath)) {
        New-Item -ItemType Directory -Force -Path $fullPath | Out-Null
        Write-Host "  Created: $dir" -ForegroundColor Gray
    }
}

Write-Host ""
Write-Host "Creating PowerShell scripts..." -ForegroundColor Green

# WSL-MultiInstance-Manager.ps1
$wslManagerScript = @'
# WSL-MultiInstance-Manager.ps1 - WSL Claude Codeインスタンス管理ツール

param(
    [Parameter(Mandatory=$false)]
    [string]$Command = "help",
    
    [Parameter(Mandatory=$false)]
    [string]$InstanceName = "",
    
    [Parameter(Mandatory=$false)]
    [int]$BasePort = 8080,
    
    [Parameter(Mandatory=$false)]
    [string]$CloudflareToken = ""
)

# 設定
$BaseImagePath = "C:\WSL\BaseImages\ubuntu-claude-minimal.tar"
$InstancesPath = "C:\WSL\Instances"
$ConfigPath = "C:\WSL\Config"
$BackupPath = "C:\WSL\Backups"

# ディレクトリ作成
New-Item -ItemType Directory -Force -Path $InstancesPath | Out-Null
New-Item -ItemType Directory -Force -Path $ConfigPath | Out-Null
New-Item -ItemType Directory -Force -Path $BackupPath | Out-Null

# 設定ファイルパス
$ConfigFile = "$ConfigPath\instances.json"

# 設定読み込み
function Load-Config {
    if (Test-Path $ConfigFile) {
        return Get-Content $ConfigFile | ConvertFrom-Json
    } else {
        return @{
            instances = @{}
            nextPort = $BasePort + 1
        }
    }
}

# 設定保存
function Save-Config($config) {
    $config | ConvertTo-Json -Depth 10 | Out-File $ConfigFile
}

# ベースイメージ作成
function Create-BaseImage {
    Write-Host "Creating minimal base image..." -ForegroundColor Green
    
    # 一時的なUbuntuインスタンス作成
    wsl --install -d Ubuntu-22.04
    Start-Sleep -Seconds 10
    
    # セットアップスクリプトの実行
    $setupScript = Get-Content "$PSScriptRoot\..\bash\minimal-base-setup.sh" -Raw
    
    # スクリプトを一時ファイルとして保存
    $tempScript = [System.IO.Path]::GetTempFileName()
    $setupScript | Out-File -FilePath $tempScript -Encoding UTF8
    
    # WSL内でスクリプト実行
    wsl -d Ubuntu-22.04 -u root bash < $tempScript
    Remove-Item $tempScript
    
    # エクスポート
    Write-Host "Exporting base image..."
    wsl --export Ubuntu-22.04 $BaseImagePath
    
    # 一時インスタンス削除
    wsl --terminate Ubuntu-22.04
    wsl --unregister Ubuntu-22.04
    
    Write-Host "Base image created: $BaseImagePath" -ForegroundColor Green
}

# インスタンス作成
function Create-Instance($name) {
    $config = Load-Config
    
    if ($config.instances.ContainsKey($name)) {
        Write-Host "Error: Instance '$name' already exists" -ForegroundColor Red
        return
    }
    
    # ポート割り当て
    $port = $config.nextPort
    $config.nextPort++
    
    # インスタンスパス
    $instancePath = "$InstancesPath\$name"
    New-Item -ItemType Directory -Force -Path $instancePath | Out-Null
    
    Write-Host "Creating instance '$name'..." -ForegroundColor Green
    
    # WSLインポート
    $distroName = "Ubuntu-ClaudeCode-$name"
    wsl --import $distroName $instancePath $BaseImagePath
    
    # 設定保存
    $config.instances[$name] = @{
        name = $name
        distroName = $distroName
        port = $port
        path = $instancePath
        created = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss")
    }
    Save-Config $config
    
    Write-Host "Instance '$name' created (port: $port)" -ForegroundColor Green
}

# その他の関数は省略（フルバージョンは別途提供）

# メイン処理
switch ($Command) {
    "create-base" { Create-BaseImage }
    "create" { 
        if (-not $InstanceName) {
            Write-Host "Error: -InstanceName required" -ForegroundColor Red
            exit 1
        }
        Create-Instance $InstanceName
    }
    default {
        Write-Host "Available commands: create-base, create, start, stop, remove, list, connect, backup"
    }
}
'@

$wslManagerScript | Out-File -Path "$ProjectRoot\scripts\powershell\WSL-MultiInstance-Manager.ps1" -Encoding UTF8
Write-Host "  Created: WSL-MultiInstance-Manager.ps1" -ForegroundColor Gray

# WSL-Podman-Manager.ps1
$podmanManagerScript = @'
# WSL-Podman-Manager.ps1 - Windows側からのPodman環境統合管理

param(
    [Parameter(Mandatory=$false)]
    [string]$Command = "status",
    
    [Parameter(Mandatory=$false)]
    [string]$InstanceName = "",
    
    [Parameter(Mandatory=$false)]
    [string]$ProjectName = ""
)

# 設定
$ConfigPath = "C:\WSL\Config"
$InstancesConfig = "$ConfigPath\instances.json"

# カラー出力
function Write-ColorOutput($ForegroundColor, $Text) {
    Write-Host $Text -ForegroundColor $ForegroundColor
}

# Podmanステータス確認
function Get-PodmanStatus {
    param([string]$Instance)
    
    Write-ColorOutput Cyan "=== Podman Status: $Instance ==="
    
    # Podmanバージョン確認
    $version = wsl -d "Ubuntu-ClaudeCode-$Instance" -u claude podman --version 2>$null
    if ($LASTEXITCODE -eq 0) {
        Write-ColorOutput Green "✓ Podman: $version"
    } else {
        Write-ColorOutput Red "✗ Podman: Not installed"
        return
    }
    
    # 実行中のコンテナ
    Write-ColorOutput Yellow "`nRunning containers:"
    wsl -d "Ubuntu-ClaudeCode-$Instance" -u claude podman ps --format "table {{.Names}}\t{{.Status}}\t{{.Image}}"
}

# その他の関数は省略（フルバージョンは別途提供）

# メイン処理
switch ($Command) {
    "status" {
        if ($InstanceName) {
            Get-PodmanStatus -Instance $InstanceName
        } else {
            Write-Host "Error: -InstanceName required" -ForegroundColor Red
        }
    }
    default {
        Write-Host "Available commands: status, setup, project, menu"
    }
}
'@

$podmanManagerScript | Out-File -Path "$ProjectRoot\scripts\powershell\WSL-Podman-Manager.ps1" -Encoding UTF8
Write-Host "  Created: WSL-Podman-Manager.ps1" -ForegroundColor Gray

# Create-MinimalWSLBase.ps1
$minimalBaseScript = @'
# Create-MinimalWSLBase.ps1 - 最小構成WSLベースイメージ作成

param(
    [Parameter(Mandatory=$false)]
    [switch]$IncludePodman = $false,
    
    [Parameter(Mandatory=$false)]
    [switch]$KeepTempInstance = $false
)

$ErrorActionPreference = "Stop"

Write-Host "Creating minimal WSL base image..." -ForegroundColor Cyan

# パス設定
$BaseImagePath = "C:\WSL\BaseImages\ubuntu-claude-minimal.tar"
$ScriptsPath = "C:\WSL\Scripts"

# ディレクトリ作成
New-Item -ItemType Directory -Force -Path (Split-Path $BaseImagePath -Parent) | Out-Null

# 最小構成セットアップ実行
Write-Host "Setting up minimal configuration..." -ForegroundColor Green

# 実装は minimal-base-setup.sh を使用

Write-Host "Minimal base image created successfully!" -ForegroundColor Green
'@

$minimalBaseScript | Out-File -Path "$ProjectRoot\scripts\powershell\Create-MinimalWSLBase.ps1" -Encoding UTF8
Write-Host "  Created: Create-MinimalWSLBase.ps1" -ForegroundColor Gray

# WSL-Diagnostics.ps1
$diagnosticsScript = @'
# WSL-Diagnostics.ps1 - WSL Claude Codeインスタンス診断ツール

param(
    [Parameter(Mandatory=$false)]
    [string]$InstanceName = ""
)

Write-Host "WSL Claude Code Diagnostics Tool" -ForegroundColor Cyan
Write-Host "================================" -ForegroundColor Cyan

# システム情報収集
function Get-SystemInfo {
    Write-Host "System Information:" -ForegroundColor Yellow
    
    # Windows バージョン
    $winVer = Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion"
    Write-Host "  Windows: $($winVer.ProductName) Build $($winVer.CurrentBuildNumber)" -ForegroundColor White
    
    # WSLバージョン
    Write-Host "  WSL Info:" -ForegroundColor White
    wsl --version
}

Get-SystemInfo
'@

$diagnosticsScript | Out-File -Path "$ProjectRoot\scripts\powershell\WSL-Diagnostics.ps1" -Encoding UTF8
Write-Host "  Created: WSL-Diagnostics.ps1" -ForegroundColor Gray

# Integrated-Setup.ps1
$integratedSetupScript = @'
# Integrated-Setup.ps1 - WSL + Claude Code + Podman 統合セットアップ

param(
    [Parameter(Mandatory=$false)]
    [int]$InstanceCount = 2,
    
    [Parameter(Mandatory=$false)]
    [string]$CloudflareToken = "",
    
    [Parameter(Mandatory=$false)]
    [switch]$SetupPodman = $true,
    
    [Parameter(Mandatory=$false)]
    [switch]$CreateDemoProject = $true
)

$ErrorActionPreference = "Stop"

Write-Host "WSL + Claude Code + Podman Integrated Setup" -ForegroundColor Cyan
Write-Host "===========================================" -ForegroundColor Cyan

# 実装は他のスクリプトを呼び出す

Write-Host "Setup completed!" -ForegroundColor Green
'@

$integratedSetupScript | Out-File -Path "$ProjectRoot\scripts\powershell\Integrated-Setup.ps1" -Encoding UTF8
Write-Host "  Created: Integrated-Setup.ps1" -ForegroundColor Gray

Write-Host ""
Write-Host "Creating Bash scripts..." -ForegroundColor Green

# minimal-base-setup.sh
$minimalSetupBash = @'
#!/bin/bash
# minimal-base-setup.sh - 最小構成のWSLベースイメージ作成

set -euo pipefail

log() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] $*"
}

log "Starting minimal base setup"

# システム更新
apt-get update
apt-get upgrade -y

# 必要最小限パッケージのみインストール
apt-get install -y --no-install-recommends \
    curl wget ca-certificates gnupg lsb-release \
    git sudo systemd systemd-sysv dbus vim-tiny

# 不要パッケージ削除
REMOVE_PACKAGES=(
    snapd cloud-init cloud-guest-utils unattended-upgrades
    network-manager modemmanager packagekit policykit-1
    plymouth* landscape-common ubuntu-advantage-tools
)

for package in "${REMOVE_PACKAGES[@]}"; do
    apt-get remove -y --purge $package 2>/dev/null || true
done

apt-get autoremove -y --purge
apt-get clean

log "Minimal base setup completed"
'@

$minimalSetupBash -replace "`r`n", "`n" | Out-File -Path "$ProjectRoot\scripts\bash\minimal-base-setup.sh" -Encoding UTF8 -NoNewline
Write-Host "  Created: minimal-base-setup.sh" -ForegroundColor Gray

# setup-podman-instance.sh
$podmanSetupBash = @'
#!/bin/bash
# setup-podman-instance.sh - WSLインスタンス内でのPodman環境構築

set -euo pipefail

INSTANCE_NAME="${INSTANCE_NAME:-$(hostname)}"
PODMAN_VERSION="4.9.0"

log() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] [$INSTANCE_NAME] $*"
}

log "Starting Podman setup for instance: $INSTANCE_NAME"

# Podmanインストール
apt-get update
apt-get install -y uidmap slirp4netns fuse-overlayfs

# 設定は省略（フルバージョンは別途提供）

log "Podman setup completed"
'@

$podmanSetupBash -replace "`r`n", "`n" | Out-File -Path "$ProjectRoot\scripts\bash\setup-podman-instance.sh" -Encoding UTF8 -NoNewline
Write-Host "  Created: setup-podman-instance.sh" -ForegroundColor Gray

# podman-workspace-manager.sh
$workspaceManagerBash = @'
#!/bin/bash
# podman-workspace-manager.sh - WSLインスタンス内Podman管理ツール

set -euo pipefail

COMMAND="${1:-help}"
INSTANCE_NAME="${INSTANCE_NAME:-$(hostname)}"

log() {
    echo -e "[$(date +'%Y-%m-%d %H:%M:%S')] $*"
}

case "$COMMAND" in
    create-project)
        log "Creating project..."
        ;;
    help|*)
        echo "Available commands: create-project, monitor, cleanup"
        ;;
esac
'@

$workspaceManagerBash -replace "`r`n", "`n" | Out-File -Path "$ProjectRoot\scripts\bash\podman-workspace-manager.sh" -Encoding UTF8 -NoNewline
Write-Host "  Created: podman-workspace-manager.sh" -ForegroundColor Gray

# check-minimal-status.sh
$checkStatusBash = @'
#!/bin/bash
# check-minimal-status.sh - WSLインスタンスの最小構成状態を確認

echo "=== WSL Minimal Configuration Check ==="
echo "Hostname: $(hostname)"
echo ""

echo "■ System Size:"
df -h / | grep -E "^/|Filesystem"
echo ""

echo "■ Package Statistics:"
echo "Installed packages: $(dpkg -l | grep '^ii' | wc -l)"
echo ""

echo "■ Running Services:"
systemctl list-units --type=service --state=running --no-pager | wc -l
'@

$checkStatusBash -replace "`r`n", "`n" | Out-File -Path "$ProjectRoot\scripts\bash\check-minimal-status.sh" -Encoding UTF8 -NoNewline
Write-Host "  Created: check-minimal-status.sh" -ForegroundColor Gray

# validate-podman.sh
$validatePodmanBash = @'
#!/bin/bash
# validate-podman.sh - Podman環境検証スクリプト

echo "=== Podman Environment Validation ==="
echo ""

if command -v podman &> /dev/null; then
    echo "✓ Podman installed: $(podman --version)"
else
    echo "✗ Podman not found"
    exit 1
fi

echo "✓ Validation completed"
'@

$validatePodmanBash -replace "`r`n", "`n" | Out-File -Path "$ProjectRoot\scripts\bash\validate-podman.sh" -Encoding UTF8 -NoNewline
Write-Host "  Created: validate-podman.sh" -ForegroundColor Gray

# podman-quickstart.sh
$quickstartBash = @'
#!/bin/bash
# podman-quickstart.sh - Podman環境クイックスタート

set -euo pipefail

PROJECT_NAME="${1:-demo-app}"

echo "=== Podman Quick Start ==="
echo "Creating demo project: $PROJECT_NAME"

# デモプロジェクト作成
mkdir -p ~/projects/$PROJECT_NAME
cd ~/projects/$PROJECT_NAME

echo "Demo project created at: ~/projects/$PROJECT_NAME"
'@

$quickstartBash -replace "`r`n", "`n" | Out-File -Path "$ProjectRoot\scripts\bash\podman-quickstart.sh" -Encoding UTF8 -NoNewline
Write-Host "  Created: podman-quickstart.sh" -ForegroundColor Gray

# Bashスクリプトの実行権限設定（WSLがインストールされている場合）
Write-Host ""
Write-Host "Setting execute permissions for bash scripts..." -ForegroundColor Green
$bashScripts = Get-ChildItem -Path "$ProjectRoot\scripts\bash" -Filter "*.sh"
foreach ($script in $bashScripts) {
    # Git for Windowsのbashがある場合は使用
    if (Get-Command bash -ErrorAction SilentlyContinue) {
        bash -c "chmod +x '$($script.FullName.Replace('\', '/').Replace('C:', '/mnt/c'))'" 2>$null
        Write-Host "  Set +x: $($script.Name)" -ForegroundColor Gray
    }
}

Write-Host ""
Write-Host "Script generation completed!" -ForegroundColor Green
Write-Host ""
Write-Host "Summary:" -ForegroundColor Yellow
Write-Host "  PowerShell scripts: $(($directories | Where-Object {$_ -match 'powershell'}).Count)" -ForegroundColor White
Write-Host "  Bash scripts: $(($bashScripts).Count)" -ForegroundColor White
Write-Host ""
Write-Host "Note: The generated scripts contain simplified versions." -ForegroundColor Gray
Write-Host "For full functionality, please refer to the complete scripts in the documentation." -ForegroundColor Gray
Write-Host ""
Write-Host "Next steps:" -ForegroundColor Yellow
Write-Host "1. Review and customize the scripts as needed" -ForegroundColor White
Write-Host "2. Run 'git add scripts/' to stage the files" -ForegroundColor White
Write-Host "3. Commit the changes" -ForegroundColor White
'@

# スクリプト作成用のPowerShellスクリプトを保存
$createScriptsScript | Out-File -Path "$ProjectRoot\Create-AllScripts.ps1" -Encoding UTF8

Write-Host "Created: Create-AllScripts.ps1" -ForegroundColor Green
Write-Host ""
Write-Host "To generate all script files, run:" -ForegroundColor Yellow
Write-Host "  .\Create-AllScripts.ps1" -ForegroundColor White
Write-Host ""
Write-Host "This will create all necessary scripts with basic implementations." -ForegroundColor Gray