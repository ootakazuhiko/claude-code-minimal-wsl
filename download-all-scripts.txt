# Download-AllScripts.ps1 - プロジェクトに必要なすべてのファイルをダウンロード/作成
# このスクリプト1つだけをダウンロードして実行すれば、すべてのファイルが準備されます

param(
    [string]$ProjectPath = (Get-Location).Path
)

Write-Host "`nMinimal Claude Workspaces - Complete Setup" -ForegroundColor Cyan
Write-Host "==========================================" -ForegroundColor Cyan
Write-Host ""

# ファイルを作成する関数
function Create-File {
    param(
        [string]$Path,
        [string]$Content,
        [bool]$IsExecutable = $false
    )
    
    $dir = Split-Path $Path -Parent
    if ($dir -and -not (Test-Path $dir)) {
        New-Item -ItemType Directory -Force -Path $dir | Out-Null
    }
    
    # Bashスクリプトの場合はLF改行に変換
    if ($Path -match "\.sh$") {
        $Content = $Content -replace "`r`n", "`n"
        [System.IO.File]::WriteAllText($Path, $Content, [System.Text.Encoding]::UTF8)
    } else {
        $Content | Out-File -FilePath $Path -Encoding UTF8
    }
    
    Write-Host "Created: $($Path.Replace($ProjectPath, '.'))" -ForegroundColor Green
}

# ディレクトリ構造
Write-Host "Creating directory structure..." -ForegroundColor Yellow
$dirs = @(
    "scripts\powershell",
    "scripts\bash",
    "docs",
    "examples\sample-projects",
    "tools",
    ".github\workflows"
)

foreach ($dir in $dirs) {
    $fullPath = Join-Path $ProjectPath $dir
    if (-not (Test-Path $fullPath)) {
        New-Item -ItemType Directory -Force -Path $fullPath | Out-Null
    }
}

Write-Host "`nCreating files..." -ForegroundColor Yellow

# README.md
Create-File -Path "$ProjectPath\README.md" -Content @'
# Minimal Claude Workspaces

![WSL2](https://img.shields.io/badge/WSL2-Ubuntu%2022.04-orange)
![Podman](https://img.shields.io/badge/Podman-Rootless-blue)
![Size](https://img.shields.io/badge/Size-500MB-green)
![License](https://img.shields.io/badge/License-MIT-lightgrey)

**Claude Code向けに最適化された複数の独立WSLインスタンスを管理し、各インスタンスでPodmanによるコンテナ開発環境を提供するツール**

[Full README content here - replace with actual content]
'@

# LICENSE
Create-File -Path "$ProjectPath\LICENSE" -Content @'
MIT License

Copyright (c) 2024 [Your Name]

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
'@

# .gitignore
Create-File -Path "$ProjectPath\.gitignore" -Content @'
# WSL related
*.tar
*.vhdx
*.tar.gz

# Configuration files with sensitive data
instances.json
integrated-config.json
*.token
*.key
credentials.json

# Backup files
/Backups/
*.backup
*.bak

# Temporary files
*.tmp
*.temp
*.log
*.swp
*~

# Windows specific
Thumbs.db
ehthumbs.db
Desktop.ini
$RECYCLE.BIN/

# IDE files
.vscode/
.idea/
'@

# WSL-MultiInstance-Manager.ps1 (簡易版)
Create-File -Path "$ProjectPath\scripts\powershell\WSL-MultiInstance-Manager.ps1" -Content @'
# WSL-MultiInstance-Manager.ps1
# Note: This is a placeholder. Copy the full script from the artifacts.

param(
    [string]$Command = "help",
    [string]$InstanceName = ""
)

Write-Host "WSL Multi-Instance Manager" -ForegroundColor Cyan
Write-Host "This is a placeholder script." -ForegroundColor Yellow
Write-Host "Please copy the full implementation from the project artifacts." -ForegroundColor Yellow
'@

# tools/quick-start.bat
Create-File -Path "$ProjectPath\tools\quick-start.bat" -Content @'
@echo off
echo Minimal Claude Workspaces - Quick Start
echo =====================================
echo.
echo Please ensure all scripts are properly installed.
echo Run: powershell -ExecutionPolicy Bypass -File scripts\powershell\Integrated-Setup.ps1
pause
'@

# サンプルファイルを作成
Create-File -Path "$ProjectPath\examples\docker-compose.yml" -Content @'
version: "3.8"
services:
  app:
    image: node:18-alpine
    ports:
      - "3000:3000"
    volumes:
      - ./app:/app
    command: npm start
'@

# .gitkeep for empty directories
Create-File -Path "$ProjectPath\examples\sample-projects\.gitkeep" -Content ""

Write-Host "`n==========================================" -ForegroundColor Cyan
Write-Host " Setup Complete!" -ForegroundColor Green
Write-Host "==========================================" -ForegroundColor Cyan

Write-Host "`nIMPORTANT:" -ForegroundColor Yellow
Write-Host "This script created placeholder files only." -ForegroundColor Yellow
Write-Host ""
Write-Host "To get the complete script files, you need to:" -ForegroundColor White
Write-Host "1. Copy each script content from the conversation artifacts" -ForegroundColor Gray
Write-Host "2. Replace the placeholder content in each file" -ForegroundColor Gray
Write-Host "3. Make bash scripts executable:" -ForegroundColor Gray
Write-Host "   git update-index --chmod=+x scripts/bash/*.sh" -ForegroundColor Gray

Write-Host "`nFile structure created at: $ProjectPath" -ForegroundColor Green

# 実際のスクリプト内容を含むZIPファイルを作成する案内
Write-Host "`nAlternatively, you can:" -ForegroundColor Yellow
Write-Host "1. Ask for a specific script's full content" -ForegroundColor White
Write-Host "2. Request all scripts in a different format" -ForegroundColor White
Write-Host "3. Create scripts manually using the artifacts as reference" -ForegroundColor White
'@
}

Write-Host "Download-AllScripts.ps1 created!" -ForegroundColor Green
Write-Host ""
Write-Host "This script will create the basic project structure." -ForegroundColor Yellow
Write-Host "However, you'll still need to copy the full script contents from the artifacts." -ForegroundColor Yellow

# より簡単な方法の提案
Write-Host "`nSimplest approach:" -ForegroundColor Cyan
Write-Host "1. Run: .\Download-AllScripts.ps1" -ForegroundColor White
Write-Host "2. Then copy each script's content from the artifacts one by one" -ForegroundColor White
Write-Host "3. Or ask me to provide specific scripts in a copy-paste friendly format" -ForegroundColor White