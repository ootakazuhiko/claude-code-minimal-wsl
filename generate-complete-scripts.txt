# Generate-CompleteScripts.ps1 - 完全なスクリプトファイルセットを生成
# プロジェクトルートで実行してください

param(
    [string]$OutputPath = (Get-Location).Path,
    [switch]$IncludeFullScripts = $true
)

$ErrorActionPreference = "Stop"

Write-Host "`n===========================================" -ForegroundColor Cyan
Write-Host " Minimal Claude Workspaces Script Generator" -ForegroundColor Cyan
Write-Host " Complete Version with Full Scripts" -ForegroundColor Cyan
Write-Host "===========================================" -ForegroundColor Cyan
Write-Host ""

# プロジェクト構造の定義
$structure = @{
    "scripts/powershell" = @(
        "WSL-MultiInstance-Manager.ps1",
        "WSL-Podman-Manager.ps1",
        "Create-MinimalWSLBase.ps1",
        "WSL-Diagnostics.ps1",
        "Integrated-Setup.ps1"
    )
    "scripts/bash" = @(
        "minimal-base-setup.sh",
        "setup-podman-instance.sh",
        "podman-workspace-manager.sh",
        "check-minimal-status.sh",
        "validate-podman.sh",
        "podman-quickstart.sh"
    )
    "docs" = @(
        "architecture.md",
        "setup-guide.md",
        "troubleshooting.md",
        "minimal-config.md"
    )
    "examples" = @(
        "docker-compose.yml",
        "sample-projects/.gitkeep"
    )
    "tools" = @(
        "quick-start.bat"
    )
    ".github/workflows" = @(
        "validate.yml"
    )
    "." = @(
        "README.md",
        "LICENSE",
        ".gitignore",
        "CONTRIBUTING.md",
        ".markdownlint.json"
    )
}

# ディレクトリ作成関数
function Create-DirectoryStructure {
    foreach ($dir in $structure.Keys) {
        $fullPath = Join-Path $OutputPath $dir
        if (-not (Test-Path $fullPath)) {
            New-Item -ItemType Directory -Force -Path $fullPath | Out-Null
            Write-Host "[Created] Directory: $dir" -ForegroundColor Green
        }
    }
}

# ファイル内容を生成する関数
function Get-FileContent($filename) {
    switch ($filename) {
        # PowerShellスクリプト
        "WSL-MultiInstance-Manager.ps1" {
            return Get-WSLManagerScript
        }
        "WSL-Podman-Manager.ps1" {
            return Get-PodmanManagerScript
        }
        "Create-MinimalWSLBase.ps1" {
            return Get-MinimalBaseScript
        }
        "WSL-Diagnostics.ps1" {
            return Get-DiagnosticsScript
        }
        "Integrated-Setup.ps1" {
            return Get-IntegratedSetupScript
        }
        
        # Bashスクリプト
        "minimal-base-setup.sh" {
            return Get-MinimalSetupBash
        }
        "setup-podman-instance.sh" {
            return Get-PodmanSetupBash
        }
        "podman-workspace-manager.sh" {
            return Get-WorkspaceManagerBash
        }
        "check-minimal-status.sh" {
            return Get-CheckStatusBash
        }
        "validate-podman.sh" {
            return Get-ValidatePodmanBash
        }
        "podman-quickstart.sh" {
            return Get-QuickstartBash
        }
        
        # その他のファイル
        "quick-start.bat" {
            return Get-QuickStartBat
        }
        ".gitkeep" {
            return ""
        }
        default {
            return "# $filename`n`nContent will be added here."
        }
    }
}

# スクリプト内容定義（主要なもののみ抜粋）
function Get-WSLManagerScript {
    return @'
# WSL-MultiInstance-Manager.ps1 - WSL Claude Codeインスタンス管理ツール
# 完全版

param(
    [Parameter(Mandatory=$false)]
    [string]$Command = "help",
    
    [Parameter(Mandatory=$false)]
    [string]$InstanceName = "",
    
    [Parameter(Mandatory=$false)]
    [int]$BasePort = 8080,
    
    [Parameter(Mandatory=$false)]
    [string]$CloudflareToken = ""
)

# 設定
$BaseImagePath = "C:\WSL\BaseImages\ubuntu-claude-minimal.tar"
$InstancesPath = "C:\WSL\Instances"
$ConfigPath = "C:\WSL\Config"
$BackupPath = "C:\WSL\Backups"

# ここに完全な実装を含める
# (実際のスクリプトの内容をここに配置)

Write-Host "WSL Multi-Instance Manager - Placeholder Implementation" -ForegroundColor Yellow
Write-Host "Please replace with the full script content" -ForegroundColor Yellow
'@
}

function Get-MinimalSetupBash {
    return @'
#!/bin/bash
# minimal-base-setup.sh - 最小構成のWSLベースイメージ作成

set -euo pipefail

log() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] $*"
}

# 完全な実装
log "Starting minimal base setup"

# システム更新
apt-get update && apt-get upgrade -y

# 必要最小限パッケージ
apt-get install -y --no-install-recommends \
    curl wget ca-certificates gnupg lsb-release \
    git sudo systemd systemd-sysv dbus vim-tiny

# 不要パッケージ削除
REMOVE_PACKAGES=(
    snapd cloud-init cloud-guest-utils unattended-upgrades
    update-manager-core ubuntu-release-upgrader-core accountsservice
    bolt modemmanager network-manager packagekit policykit-1
    udisks2 upower whoopsie apport popularity-contest
    plymouth* landscape-common ubuntu-advantage-tools
    xdg-user-dirs man-db manpages
)

for package in "${REMOVE_PACKAGES[@]}"; do
    apt-get remove -y --purge $package 2>/dev/null || true
done

# クリーンアップ
apt-get autoremove -y --purge
apt-get clean
rm -rf /var/lib/apt/lists/*
rm -rf /usr/share/doc/* /usr/share/man/*

log "Minimal setup completed"
'@
}

function Get-QuickStartBat {
    return @'
@echo off
REM quick-start.bat - Minimal Claude Workspaces Quick Start

echo ===============================================
echo  Minimal Claude Workspaces - Quick Start
echo ===============================================
echo.

REM Check administrator
net session >nul 2>&1
if %errorLevel% neq 0 (
    echo ERROR: Administrator privileges required.
    pause
    exit /b 1
)

REM Run setup
powershell -ExecutionPolicy Bypass -File "%~dp0..\scripts\powershell\Integrated-Setup.ps1" -InstanceCount 2 -SetupPodman

pause
'@
}

# 簡易版の関数（実際にはもっと詳細な内容が必要）
function Get-PodmanManagerScript { return "# WSL-Podman-Manager.ps1`n# Placeholder - Add full content" }
function Get-MinimalBaseScript { return "# Create-MinimalWSLBase.ps1`n# Placeholder - Add full content" }
function Get-DiagnosticsScript { return "# WSL-Diagnostics.ps1`n# Placeholder - Add full content" }
function Get-IntegratedSetupScript { return "# Integrated-Setup.ps1`n# Placeholder - Add full content" }
function Get-PodmanSetupBash { return "#!/bin/bash`n# setup-podman-instance.sh`n# Placeholder - Add full content" }
function Get-WorkspaceManagerBash { return "#!/bin/bash`n# podman-workspace-manager.sh`n# Placeholder - Add full content" }
function Get-CheckStatusBash { return "#!/bin/bash`n# check-minimal-status.sh`n# Placeholder - Add full content" }
function Get-ValidatePodmanBash { return "#!/bin/bash`n# validate-podman.sh`n# Placeholder - Add full content" }
function Get-QuickstartBash { return "#!/bin/bash`n# podman-quickstart.sh`n# Placeholder - Add full content" }

# メイン処理
Write-Host "Creating directory structure..." -ForegroundColor Yellow
Create-DirectoryStructure

Write-Host "`nGenerating script files..." -ForegroundColor Yellow

$totalFiles = 0
$createdFiles = 0

foreach ($dir in $structure.Keys) {
    foreach ($file in $structure[$dir]) {
        $totalFiles++
        $fullPath = Join-Path $OutputPath (Join-Path $dir $file)
        
        try {
            $content = Get-FileContent $file
            
            # Bashスクリプトの場合は改行コードをLFに
            if ($file -match "\.sh$") {
                $content = $content -replace "`r`n", "`n"
                [System.IO.File]::WriteAllText($fullPath, $content, [System.Text.Encoding]::UTF8)
            } else {
                $content | Out-File -FilePath $fullPath -Encoding UTF8
            }
            
            Write-Host "[Created] $dir/$file" -ForegroundColor Green
            $createdFiles++
        } catch {
            Write-Host "[Failed] $dir/$file - $_" -ForegroundColor Red
        }
    }
}

Write-Host "`n===========================================" -ForegroundColor Cyan
Write-Host " Generation Summary" -ForegroundColor Cyan
Write-Host "===========================================" -ForegroundColor Cyan
Write-Host "Total files: $totalFiles" -ForegroundColor White
Write-Host "Created: $createdFiles" -ForegroundColor Green
Write-Host "Failed: $($totalFiles - $createdFiles)" -ForegroundColor Red

Write-Host "`nNext steps:" -ForegroundColor Yellow
Write-Host "1. Replace placeholder content with full scripts" -ForegroundColor White
Write-Host "2. Set execute permissions for bash scripts:" -ForegroundColor White
Write-Host "   git update-index --chmod=+x scripts/bash/*.sh" -ForegroundColor Gray
Write-Host "3. Review and test the scripts" -ForegroundColor White
Write-Host "4. Commit to Git repository" -ForegroundColor White

# 完全なスクリプトの取得方法を案内
Write-Host "`n" -ForegroundColor Yellow
Write-Host "NOTE: This generator creates placeholder files." -ForegroundColor Yellow
Write-Host "To get the complete script contents, you need to:" -ForegroundColor Yellow
Write-Host "1. Copy the full scripts from the artifacts in the conversation" -ForegroundColor White
Write-Host "2. Or request the full content for specific scripts" -ForegroundColor White
'@
}

# スクリプトを保存
Save-Script -Path (Join-Path $OutputPath "Generate-CompleteScripts.ps1") -Content $generateScript

Write-Host "`nScript generator created: Generate-CompleteScripts.ps1" -ForegroundColor Green
Write-Host "Run this script to generate all project files." -ForegroundColor White